.. Copyright Â© 2018 linuor. All Rights Reserved.

##########
uCMake.vim
##########

A vim helper for cmake build system.

********
Features
********

- Asynchronously configuration and compilation.
- Simulate multi-config generator for different build types.
- Detect the source tree root automatically.
- Create binary trees for building automatically.
- Link compilation database ``compile_commands.json`` automatically.
- Automatically pass some common used variables to cmake,
  such as ``-DCMAKE_BUILD_TYPE=Debug`` . As long as any additional variables.

*****
Usage
*****

uCMake.vim provides several commands to make it easier to use cmake in vim:

``:Cmake``
  For running configuration. Any additional cmake options can be appended to the
  commandline.

``:make``
  For compilation. It is the original built-in command.
  In the case of multi-config, it only applies to the first one.
  Additional make options such as ``-j4`` should be appended after a ``--`` ,
  just like this: ``:make -- test -j4`` .

``:Amake``
  Asynchronously acts as ``:make`` , and applies to all the configuration types.
  Additional make options such as ``-j4`` could be appended directly, 
  such as ``:Amake test -j4`` .

Notice that don't run the commands on buffers not belongs to any source tree.

*******
Options
*******

uCMake.vim provides options to tweek its behavior:

``g:ucmake_cmakelists_file``
  A string of the cmake lists file name.
  The default value is ``CMakeLists.txt`` .

``g:ucmake_cmake_prg``
  A string of the cmake program. The default value is ``cmake`` .
  If the program can not be find in the ``$PATH`` enviroment,
  set ``g:ucmake_cmake_prg = '/path/to/cmake'`` .

``g:ucmake_source_tree_root_symbolics``
  A string list specifying symbolic to detect the source tree root.
  The default value is ``['.git', 'CMakeLists.txt']`` .

``g:ucmake_active_config_types``
  A string list specifying all active configuration types to be generated.
  The defult value is ``['']`` .
  Another sample for multi-config could be: ``['Release', 'Debug']`` .

  Always keep items in this list unique.

``g:ucmake_enable_link_compilation_database`` 
  Link compilation database to ``g:ucmake_compilation_database_link_target``
  or not. The default value is ``ON`` .

``g:ucmake_binary_directory``
  A string specifying where the binary tree(s) located.
  Sepcial variables in it are allowed.
  The default value is ``../build_{project_name}_{buildtype}`` .
  Available values could be:

    - ``{source_tree_root}`` or empty, means the source tree root.
      This will result building in source tree.
    - ``/path/to/build-tree`` absolute path.
    - ``../build-tree`` relative path to the source tree root.
      Not relative to the current working directory.
    - ``../build-{project_name}-{build_type}`` path with variables,
      either absolute or relative are both ok.
      Only ``{project_name}`` and ``{buildtype}`` are supported now.

    For path without ``{buildtype}`` variable in it,
    additional sub-directory will be created,
    while multi-config types are provided in ``g:ucmake_active_config_types`` .

    For example, if ``g:ucmake_active_config_types=['Release', 'Debug']`` ,
    and ``g:ucmake_binary_directory='/path/to/build'`` ,
    two sub-directory will be created in ``/path/to/build`` , they are:
    
    - ``/path/to/build/Release``
    - ``/path/to/build/Debug``

``g:ucmake_compilation_database_link_target``
  A string specifying the location where the compilation database link to.
  Available value is the same with ``g:ucmake_binary_directory`` .
  The default value is empty, means the source tree root.

  In the case of multi-config, only the database generated by the first
  configuration will be link to ``g:ucmake_compilation_database_link_target`` .

``g:ucmake_compilation_database_name``
  File name of the compilation database generated by cmake.
  The default value is ``compile_commands.json`` .

  This option is used to search the database, not for linking.
  To specify the link name of the database,
  use ``g:ucmake_compilation_database_link_target`` instead.

``g:ucmake_cache_entries``
  A dictionary containing variables to pass to cmake with ``-D`` .
  A key-value pair in the dictionary is a cmake cache entry and its value.
  For example, ``g:ucmake_cache_entries={'CMAKE_INSTALL_PREFIX':'tmp'}``
  will pass ``-DCMAKE_INSTALL_PREFIX=tmp`` to cmake.

  Don't define ``CMAKE_BUILD_TYPE`` and ``CMAKE_EXPORT_COMPILE_COMMANDS``
  in the dictionary, use ``g:ucmake_active_config_types`` and
  ``g:ucmake_enable_link_compilation_database`` instead.

******
Macros
******

uCMake.vim provides some read-only macros to use in options,
which will be replace with their own values when applied. They are:

- ``{source_tree_root}`` the full path of the source tree root.
- ``{project_name}`` the directory name of the source tree root.
- ``{build_type}`` the build type about to use.
- ``{top_cmakelists}`` the full path of the top most ``CMakeLists.txt`` file.

***************
TODOs and DONEs
***************

DONEs
=====

- First release.

TODOs
=====

- vim documentation.
- cmake server.

BUGs
====

- ``job_start()`` inconsistent in the form of command, and ``cwd`` option.

